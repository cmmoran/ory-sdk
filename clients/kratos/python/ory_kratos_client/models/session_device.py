# coding: utf-8

"""
    Ory Identities API

    This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 

    The version of the OpenAPI document: v1.4.0-alpha.0
    Contact: office@ory.sh
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ory_kratos_client.models.session_authentication_method import SessionAuthenticationMethod
from typing import Optional, Set
from typing_extensions import Self

class SessionDevice(BaseModel):
    """
    Device corresponding to a Session
    """ # noqa: E501
    authentication_methods: Optional[List[SessionAuthenticationMethod]] = Field(default=None, description="A list of authenticators which were used to authenticate the session.")
    id: StrictStr = Field(description="Device record ID")
    ip_address: Optional[StrictStr] = Field(default=None, description="IPAddress of the client")
    location: Optional[StrictStr] = Field(default=None, description="Geo Location corresponding to the IP Address")
    trusted: Optional[StrictBool] = Field(default=None, description="Is this device trusted? (only matters if this device submitted aal2+ credentials)")
    user_agent: Optional[StrictStr] = Field(default=None, description="UserAgent of the client")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["authentication_methods", "id", "ip_address", "location", "trusted", "user_agent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SessionDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authentication_methods (list)
        _items = []
        if self.authentication_methods:
            for _item_authentication_methods in self.authentication_methods:
                if _item_authentication_methods:
                    _items.append(_item_authentication_methods.to_dict())
            _dict['authentication_methods'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SessionDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authentication_methods": [SessionAuthenticationMethod.from_dict(_item) for _item in obj["authentication_methods"]] if obj.get("authentication_methods") is not None else None,
            "id": obj.get("id"),
            "ip_address": obj.get("ip_address"),
            "location": obj.get("location"),
            "trusted": obj.get("trusted"),
            "user_agent": obj.get("user_agent")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


