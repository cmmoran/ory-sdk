// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Ory.Kratos.Client.Client;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// A singular authenticator used during authentication / login.
    /// </summary>
    public partial class KratosSessionAuthenticationMethod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosSessionAuthenticationMethod" /> class.
        /// </summary>
        /// <param name="aal">aal</param>
        /// <param name="completedAt">When the authentication challenge was completed.</param>
        /// <param name="deviceTrustBased">DeviceTrustBased indicates that this authentication method was added due to device trust</param>
        /// <param name="method">method</param>
        /// <param name="organization">The Organization id used for authentication</param>
        /// <param name="provider">OIDC or SAML provider id used for authentication</param>
        [JsonConstructor]
        public KratosSessionAuthenticationMethod(Option<KratosAuthenticatorAssuranceLevel?> aal = default, Option<DateTime?> completedAt = default, Option<bool?> deviceTrustBased = default, Option<MethodEnum?> method = default, Option<string?> organization = default, Option<string?> provider = default)
        {
            AalOption = aal;
            CompletedAtOption = completedAt;
            DeviceTrustBasedOption = deviceTrustBased;
            MethodOption = method;
            OrganizationOption = organization;
            ProviderOption = provider;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Aal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosAuthenticatorAssuranceLevel?> AalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Aal
        /// </summary>
        [JsonPropertyName("aal")]
        public KratosAuthenticatorAssuranceLevel? Aal { get { return this.AalOption; } set { this.AalOption = new(value); } }

        /// <summary>
        /// Defines Method
        /// </summary>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum LinkRecovery for value: link_recovery
            /// </summary>
            LinkRecovery = 1,

            /// <summary>
            /// Enum CodeRecovery for value: code_recovery
            /// </summary>
            CodeRecovery = 2,

            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            Password = 3,

            /// <summary>
            /// Enum Code for value: code
            /// </summary>
            Code = 4,

            /// <summary>
            /// Enum Totp for value: totp
            /// </summary>
            Totp = 5,

            /// <summary>
            /// Enum Oidc for value: oidc
            /// </summary>
            Oidc = 6,

            /// <summary>
            /// Enum Webauthn for value: webauthn
            /// </summary>
            Webauthn = 7,

            /// <summary>
            /// Enum LookupSecret for value: lookup_secret
            /// </summary>
            LookupSecret = 8,

            /// <summary>
            /// Enum V06LegacySession for value: v0.6_legacy_session
            /// </summary>
            V06LegacySession = 9
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("link_recovery"))
                return MethodEnum.LinkRecovery;

            if (value.Equals("code_recovery"))
                return MethodEnum.CodeRecovery;

            if (value.Equals("password"))
                return MethodEnum.Password;

            if (value.Equals("code"))
                return MethodEnum.Code;

            if (value.Equals("totp"))
                return MethodEnum.Totp;

            if (value.Equals("oidc"))
                return MethodEnum.Oidc;

            if (value.Equals("webauthn"))
                return MethodEnum.Webauthn;

            if (value.Equals("lookup_secret"))
                return MethodEnum.LookupSecret;

            if (value.Equals("v0.6_legacy_session"))
                return MethodEnum.V06LegacySession;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("link_recovery"))
                return MethodEnum.LinkRecovery;

            if (value.Equals("code_recovery"))
                return MethodEnum.CodeRecovery;

            if (value.Equals("password"))
                return MethodEnum.Password;

            if (value.Equals("code"))
                return MethodEnum.Code;

            if (value.Equals("totp"))
                return MethodEnum.Totp;

            if (value.Equals("oidc"))
                return MethodEnum.Oidc;

            if (value.Equals("webauthn"))
                return MethodEnum.Webauthn;

            if (value.Equals("lookup_secret"))
                return MethodEnum.LookupSecret;

            if (value.Equals("v0.6_legacy_session"))
                return MethodEnum.V06LegacySession;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum? value)
        {
            if (value == MethodEnum.LinkRecovery)
                return "link_recovery";

            if (value == MethodEnum.CodeRecovery)
                return "code_recovery";

            if (value == MethodEnum.Password)
                return "password";

            if (value == MethodEnum.Code)
                return "code";

            if (value == MethodEnum.Totp)
                return "totp";

            if (value == MethodEnum.Oidc)
                return "oidc";

            if (value == MethodEnum.Webauthn)
                return "webauthn";

            if (value == MethodEnum.LookupSecret)
                return "lookup_secret";

            if (value == MethodEnum.V06LegacySession)
                return "v0.6_legacy_session";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Method
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MethodEnum?> MethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [JsonPropertyName("method")]
        public MethodEnum? Method { get { return this.MethodOption; } set { this.MethodOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompletedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CompletedAtOption { get; private set; }

        /// <summary>
        /// When the authentication challenge was completed.
        /// </summary>
        /// <value>When the authentication challenge was completed.</value>
        [JsonPropertyName("completed_at")]
        public DateTime? CompletedAt { get { return this.CompletedAtOption; } set { this.CompletedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceTrustBased
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeviceTrustBasedOption { get; private set; }

        /// <summary>
        /// DeviceTrustBased indicates that this authentication method was added due to device trust
        /// </summary>
        /// <value>DeviceTrustBased indicates that this authentication method was added due to device trust</value>
        [JsonPropertyName("device_trust_based")]
        public bool? DeviceTrustBased { get { return this.DeviceTrustBasedOption; } set { this.DeviceTrustBasedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Organization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationOption { get; private set; }

        /// <summary>
        /// The Organization id used for authentication
        /// </summary>
        /// <value>The Organization id used for authentication</value>
        [JsonPropertyName("organization")]
        public string? Organization { get { return this.OrganizationOption; } set { this.OrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Provider
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProviderOption { get; private set; }

        /// <summary>
        /// OIDC or SAML provider id used for authentication
        /// </summary>
        /// <value>OIDC or SAML provider id used for authentication</value>
        [JsonPropertyName("provider")]
        public string? Provider { get { return this.ProviderOption; } set { this.ProviderOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosSessionAuthenticationMethod {\n");
            sb.Append("  Aal: ").Append(Aal).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  DeviceTrustBased: ").Append(DeviceTrustBased).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosSessionAuthenticationMethod" />
    /// </summary>
    public class KratosSessionAuthenticationMethodJsonConverter : JsonConverter<KratosSessionAuthenticationMethod>
    {
        /// <summary>
        /// The format to use to serialize CompletedAt
        /// </summary>
        public static string CompletedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="KratosSessionAuthenticationMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosSessionAuthenticationMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosAuthenticatorAssuranceLevel?> aal = default;
            Option<DateTime?> completedAt = default;
            Option<bool?> deviceTrustBased = default;
            Option<KratosSessionAuthenticationMethod.MethodEnum?> method = default;
            Option<string?> organization = default;
            Option<string?> provider = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "aal":
                            string? aalRawValue = utf8JsonReader.GetString();
                            if (aalRawValue != null)
                                aal = new Option<KratosAuthenticatorAssuranceLevel?>(KratosAuthenticatorAssuranceLevelValueConverter.FromStringOrDefault(aalRawValue));
                            break;
                        case "completed_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                completedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "device_trust_based":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deviceTrustBased = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "method":
                            string? methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<KratosSessionAuthenticationMethod.MethodEnum?>(KratosSessionAuthenticationMethod.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        case "organization":
                            organization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "provider":
                            provider = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (aal.IsSet && aal.Value == null)
                throw new ArgumentNullException(nameof(aal), "Property is not nullable for class KratosSessionAuthenticationMethod.");

            if (completedAt.IsSet && completedAt.Value == null)
                throw new ArgumentNullException(nameof(completedAt), "Property is not nullable for class KratosSessionAuthenticationMethod.");

            if (deviceTrustBased.IsSet && deviceTrustBased.Value == null)
                throw new ArgumentNullException(nameof(deviceTrustBased), "Property is not nullable for class KratosSessionAuthenticationMethod.");

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosSessionAuthenticationMethod.");

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization), "Property is not nullable for class KratosSessionAuthenticationMethod.");

            if (provider.IsSet && provider.Value == null)
                throw new ArgumentNullException(nameof(provider), "Property is not nullable for class KratosSessionAuthenticationMethod.");

            return new KratosSessionAuthenticationMethod(aal, completedAt, deviceTrustBased, method, organization, provider);
        }

        /// <summary>
        /// Serializes a <see cref="KratosSessionAuthenticationMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosSessionAuthenticationMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosSessionAuthenticationMethod kratosSessionAuthenticationMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosSessionAuthenticationMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosSessionAuthenticationMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosSessionAuthenticationMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosSessionAuthenticationMethod kratosSessionAuthenticationMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosSessionAuthenticationMethod.OrganizationOption.IsSet && kratosSessionAuthenticationMethod.Organization == null)
                throw new ArgumentNullException(nameof(kratosSessionAuthenticationMethod.Organization), "Property is required for class KratosSessionAuthenticationMethod.");

            if (kratosSessionAuthenticationMethod.ProviderOption.IsSet && kratosSessionAuthenticationMethod.Provider == null)
                throw new ArgumentNullException(nameof(kratosSessionAuthenticationMethod.Provider), "Property is required for class KratosSessionAuthenticationMethod.");

            if (kratosSessionAuthenticationMethod.AalOption.IsSet)
            {
                var aalRawValue = KratosAuthenticatorAssuranceLevelValueConverter.ToJsonValue(kratosSessionAuthenticationMethod.Aal!.Value);
                writer.WriteString("aal", aalRawValue);
            }
            if (kratosSessionAuthenticationMethod.CompletedAtOption.IsSet)
                writer.WriteString("completed_at", kratosSessionAuthenticationMethod.CompletedAtOption.Value!.Value.ToString(CompletedAtFormat));

            if (kratosSessionAuthenticationMethod.DeviceTrustBasedOption.IsSet)
                writer.WriteBoolean("device_trust_based", kratosSessionAuthenticationMethod.DeviceTrustBasedOption.Value!.Value);

            var methodRawValue = KratosSessionAuthenticationMethod.MethodEnumToJsonValue(kratosSessionAuthenticationMethod.MethodOption.Value!.Value);
            writer.WriteString("method", methodRawValue);
            if (kratosSessionAuthenticationMethod.OrganizationOption.IsSet)
                writer.WriteString("organization", kratosSessionAuthenticationMethod.Organization);

            if (kratosSessionAuthenticationMethod.ProviderOption.IsSet)
                writer.WriteString("provider", kratosSessionAuthenticationMethod.Provider);
        }
    }
}
