// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Ory.Kratos.Client.Client;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// KratosIdentityCredentialsCodeAddress
    /// </summary>
    public partial class KratosIdentityCredentialsCodeAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIdentityCredentialsCodeAddress" /> class.
        /// </summary>
        /// <param name="address">The address for this code</param>
        /// <param name="channel">channel</param>
        [JsonConstructor]
        public KratosIdentityCredentialsCodeAddress(Option<string?> address = default, Option<string?> channel = default)
        {
            AddressOption = address;
            ChannelOption = channel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressOption { get; private set; }

        /// <summary>
        /// The address for this code
        /// </summary>
        /// <value>The address for this code</value>
        [JsonPropertyName("address")]
        public string? Address { get { return this.AddressOption; } set { this.AddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Channel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ChannelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [JsonPropertyName("channel")]
        public string? Channel { get { return this.ChannelOption; } set { this.ChannelOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIdentityCredentialsCodeAddress {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIdentityCredentialsCodeAddress" />
    /// </summary>
    public class KratosIdentityCredentialsCodeAddressJsonConverter : JsonConverter<KratosIdentityCredentialsCodeAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosIdentityCredentialsCodeAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIdentityCredentialsCodeAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> address = default;
            Option<string?> channel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "channel":
                            channel = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class KratosIdentityCredentialsCodeAddress.");

            if (channel.IsSet && channel.Value == null)
                throw new ArgumentNullException(nameof(channel), "Property is not nullable for class KratosIdentityCredentialsCodeAddress.");

            return new KratosIdentityCredentialsCodeAddress(address, channel);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIdentityCredentialsCodeAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsCodeAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIdentityCredentialsCodeAddress kratosIdentityCredentialsCodeAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIdentityCredentialsCodeAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIdentityCredentialsCodeAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsCodeAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIdentityCredentialsCodeAddress kratosIdentityCredentialsCodeAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIdentityCredentialsCodeAddress.AddressOption.IsSet && kratosIdentityCredentialsCodeAddress.Address == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsCodeAddress.Address), "Property is required for class KratosIdentityCredentialsCodeAddress.");

            if (kratosIdentityCredentialsCodeAddress.ChannelOption.IsSet && kratosIdentityCredentialsCodeAddress.Channel == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsCodeAddress.Channel), "Property is required for class KratosIdentityCredentialsCodeAddress.");

            if (kratosIdentityCredentialsCodeAddress.AddressOption.IsSet)
                writer.WriteString("address", kratosIdentityCredentialsCodeAddress.Address);

            if (kratosIdentityCredentialsCodeAddress.ChannelOption.IsSet)
                writer.WriteString("channel", kratosIdentityCredentialsCodeAddress.Channel);
        }
    }
}
