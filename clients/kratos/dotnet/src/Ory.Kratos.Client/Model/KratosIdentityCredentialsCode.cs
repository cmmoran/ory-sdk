// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Ory.Kratos.Client.Client;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// CredentialsCode represents a one time login/registration code
    /// </summary>
    public partial class KratosIdentityCredentialsCode : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIdentityCredentialsCode" /> class.
        /// </summary>
        /// <param name="addresses">addresses</param>
        [JsonConstructor]
        public KratosIdentityCredentialsCode(Option<List<KratosIdentityCredentialsCodeAddress>?> addresses = default)
        {
            AddressesOption = addresses;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Addresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<KratosIdentityCredentialsCodeAddress>?> AddressesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [JsonPropertyName("addresses")]
        public List<KratosIdentityCredentialsCodeAddress>? Addresses { get { return this.AddressesOption; } set { this.AddressesOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIdentityCredentialsCode {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIdentityCredentialsCode" />
    /// </summary>
    public class KratosIdentityCredentialsCodeJsonConverter : JsonConverter<KratosIdentityCredentialsCode>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosIdentityCredentialsCode" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIdentityCredentialsCode Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<KratosIdentityCredentialsCodeAddress>?> addresses = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addresses":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addresses = new Option<List<KratosIdentityCredentialsCodeAddress>?>(JsonSerializer.Deserialize<List<KratosIdentityCredentialsCodeAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addresses.IsSet && addresses.Value == null)
                throw new ArgumentNullException(nameof(addresses), "Property is not nullable for class KratosIdentityCredentialsCode.");

            return new KratosIdentityCredentialsCode(addresses);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIdentityCredentialsCode" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsCode"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIdentityCredentialsCode kratosIdentityCredentialsCode, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIdentityCredentialsCode, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIdentityCredentialsCode" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsCode"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIdentityCredentialsCode kratosIdentityCredentialsCode, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIdentityCredentialsCode.AddressesOption.IsSet && kratosIdentityCredentialsCode.Addresses == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsCode.Addresses), "Property is required for class KratosIdentityCredentialsCode.");

            if (kratosIdentityCredentialsCode.AddressesOption.IsSet)
            {
                writer.WritePropertyName("addresses");
                JsonSerializer.Serialize(writer, kratosIdentityCredentialsCode.Addresses, jsonSerializerOptions);
            }
        }
    }
}
