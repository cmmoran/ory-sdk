// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Ory.Kratos.Client.Client;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// KratosProvider
    /// </summary>
    public partial class KratosProvider : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosProvider" /> class.
        /// </summary>
        /// <param name="clientId">The RP&#39;s client identifier, issued by the IdP.</param>
        /// <param name="configUrl">A full path of the IdP config file.</param>
        /// <param name="domainHint">By specifying one of domain_hints values provided by the accounts endpoints, the FedCM dialog selectively shows the specified account.</param>
        /// <param name="fields">Array of strings that specifies the user information (\&quot;name\&quot;, \&quot; email\&quot;, \&quot;picture\&quot;) that RP needs IdP to share with them.  Note: Field API is supported by Chrome 132 and later.</param>
        /// <param name="loginHint">By specifying one of login_hints values provided by the accounts endpoints, the FedCM dialog selectively shows the specified account.</param>
        /// <param name="nonce">A random string to ensure the response is issued for this specific request. Prevents replay attacks.</param>
        /// <param name="parameters">Custom object that allows to specify additional key-value parameters: scope: A string value containing additional permissions that RP needs to request, for example \&quot; drive.readonly calendar.readonly\&quot; nonce: A random string to ensure the response is issued for this specific request. Prevents replay attacks.  Other custom key-value parameters.  Note: parameters is supported from Chrome 132.</param>
        [JsonConstructor]
        public KratosProvider(Option<string?> clientId = default, Option<string?> configUrl = default, Option<string?> domainHint = default, Option<List<string>?> fields = default, Option<string?> loginHint = default, Option<string?> nonce = default, Option<Dictionary<string, string>?> parameters = default)
        {
            ClientIdOption = clientId;
            ConfigUrlOption = configUrl;
            DomainHintOption = domainHint;
            FieldsOption = fields;
            LoginHintOption = loginHint;
            NonceOption = nonce;
            ParametersOption = parameters;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ClientId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientIdOption { get; private set; }

        /// <summary>
        /// The RP&#39;s client identifier, issued by the IdP.
        /// </summary>
        /// <value>The RP&#39;s client identifier, issued by the IdP.</value>
        [JsonPropertyName("client_id")]
        public string? ClientId { get { return this.ClientIdOption; } set { this.ClientIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConfigUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConfigUrlOption { get; private set; }

        /// <summary>
        /// A full path of the IdP config file.
        /// </summary>
        /// <value>A full path of the IdP config file.</value>
        [JsonPropertyName("config_url")]
        public string? ConfigUrl { get { return this.ConfigUrlOption; } set { this.ConfigUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of DomainHint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainHintOption { get; private set; }

        /// <summary>
        /// By specifying one of domain_hints values provided by the accounts endpoints, the FedCM dialog selectively shows the specified account.
        /// </summary>
        /// <value>By specifying one of domain_hints values provided by the accounts endpoints, the FedCM dialog selectively shows the specified account.</value>
        [JsonPropertyName("domain_hint")]
        public string? DomainHint { get { return this.DomainHintOption; } set { this.DomainHintOption = new(value); } }

        /// <summary>
        /// Used to track the state of Fields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> FieldsOption { get; private set; }

        /// <summary>
        /// Array of strings that specifies the user information (\&quot;name\&quot;, \&quot; email\&quot;, \&quot;picture\&quot;) that RP needs IdP to share with them.  Note: Field API is supported by Chrome 132 and later.
        /// </summary>
        /// <value>Array of strings that specifies the user information (\&quot;name\&quot;, \&quot; email\&quot;, \&quot;picture\&quot;) that RP needs IdP to share with them.  Note: Field API is supported by Chrome 132 and later.</value>
        [JsonPropertyName("fields")]
        public List<string>? Fields { get { return this.FieldsOption; } set { this.FieldsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LoginHint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LoginHintOption { get; private set; }

        /// <summary>
        /// By specifying one of login_hints values provided by the accounts endpoints, the FedCM dialog selectively shows the specified account.
        /// </summary>
        /// <value>By specifying one of login_hints values provided by the accounts endpoints, the FedCM dialog selectively shows the specified account.</value>
        [JsonPropertyName("login_hint")]
        public string? LoginHint { get { return this.LoginHintOption; } set { this.LoginHintOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nonce
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NonceOption { get; private set; }

        /// <summary>
        /// A random string to ensure the response is issued for this specific request. Prevents replay attacks.
        /// </summary>
        /// <value>A random string to ensure the response is issued for this specific request. Prevents replay attacks.</value>
        [JsonPropertyName("nonce")]
        public string? Nonce { get { return this.NonceOption; } set { this.NonceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Parameters
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> ParametersOption { get; private set; }

        /// <summary>
        /// Custom object that allows to specify additional key-value parameters: scope: A string value containing additional permissions that RP needs to request, for example \&quot; drive.readonly calendar.readonly\&quot; nonce: A random string to ensure the response is issued for this specific request. Prevents replay attacks.  Other custom key-value parameters.  Note: parameters is supported from Chrome 132.
        /// </summary>
        /// <value>Custom object that allows to specify additional key-value parameters: scope: A string value containing additional permissions that RP needs to request, for example \&quot; drive.readonly calendar.readonly\&quot; nonce: A random string to ensure the response is issued for this specific request. Prevents replay attacks.  Other custom key-value parameters.  Note: parameters is supported from Chrome 132.</value>
        [JsonPropertyName("parameters")]
        public Dictionary<string, string>? Parameters { get { return this.ParametersOption; } set { this.ParametersOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosProvider {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ConfigUrl: ").Append(ConfigUrl).Append("\n");
            sb.Append("  DomainHint: ").Append(DomainHint).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  LoginHint: ").Append(LoginHint).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosProvider" />
    /// </summary>
    public class KratosProviderJsonConverter : JsonConverter<KratosProvider>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosProvider" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosProvider Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> clientId = default;
            Option<string?> configUrl = default;
            Option<string?> domainHint = default;
            Option<List<string>?> fields = default;
            Option<string?> loginHint = default;
            Option<string?> nonce = default;
            Option<Dictionary<string, string>?> parameters = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "client_id":
                            clientId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "config_url":
                            configUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "domain_hint":
                            domainHint = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fields":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fields = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "login_hint":
                            loginHint = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nonce":
                            nonce = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parameters":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                parameters = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId), "Property is not nullable for class KratosProvider.");

            if (configUrl.IsSet && configUrl.Value == null)
                throw new ArgumentNullException(nameof(configUrl), "Property is not nullable for class KratosProvider.");

            if (domainHint.IsSet && domainHint.Value == null)
                throw new ArgumentNullException(nameof(domainHint), "Property is not nullable for class KratosProvider.");

            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields), "Property is not nullable for class KratosProvider.");

            if (loginHint.IsSet && loginHint.Value == null)
                throw new ArgumentNullException(nameof(loginHint), "Property is not nullable for class KratosProvider.");

            if (nonce.IsSet && nonce.Value == null)
                throw new ArgumentNullException(nameof(nonce), "Property is not nullable for class KratosProvider.");

            if (parameters.IsSet && parameters.Value == null)
                throw new ArgumentNullException(nameof(parameters), "Property is not nullable for class KratosProvider.");

            return new KratosProvider(clientId, configUrl, domainHint, fields, loginHint, nonce, parameters);
        }

        /// <summary>
        /// Serializes a <see cref="KratosProvider" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosProvider"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosProvider kratosProvider, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosProvider, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosProvider" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosProvider"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosProvider kratosProvider, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosProvider.ClientIdOption.IsSet && kratosProvider.ClientId == null)
                throw new ArgumentNullException(nameof(kratosProvider.ClientId), "Property is required for class KratosProvider.");

            if (kratosProvider.ConfigUrlOption.IsSet && kratosProvider.ConfigUrl == null)
                throw new ArgumentNullException(nameof(kratosProvider.ConfigUrl), "Property is required for class KratosProvider.");

            if (kratosProvider.DomainHintOption.IsSet && kratosProvider.DomainHint == null)
                throw new ArgumentNullException(nameof(kratosProvider.DomainHint), "Property is required for class KratosProvider.");

            if (kratosProvider.FieldsOption.IsSet && kratosProvider.Fields == null)
                throw new ArgumentNullException(nameof(kratosProvider.Fields), "Property is required for class KratosProvider.");

            if (kratosProvider.LoginHintOption.IsSet && kratosProvider.LoginHint == null)
                throw new ArgumentNullException(nameof(kratosProvider.LoginHint), "Property is required for class KratosProvider.");

            if (kratosProvider.NonceOption.IsSet && kratosProvider.Nonce == null)
                throw new ArgumentNullException(nameof(kratosProvider.Nonce), "Property is required for class KratosProvider.");

            if (kratosProvider.ParametersOption.IsSet && kratosProvider.Parameters == null)
                throw new ArgumentNullException(nameof(kratosProvider.Parameters), "Property is required for class KratosProvider.");

            if (kratosProvider.ClientIdOption.IsSet)
                writer.WriteString("client_id", kratosProvider.ClientId);

            if (kratosProvider.ConfigUrlOption.IsSet)
                writer.WriteString("config_url", kratosProvider.ConfigUrl);

            if (kratosProvider.DomainHintOption.IsSet)
                writer.WriteString("domain_hint", kratosProvider.DomainHint);

            if (kratosProvider.FieldsOption.IsSet)
            {
                writer.WritePropertyName("fields");
                JsonSerializer.Serialize(writer, kratosProvider.Fields, jsonSerializerOptions);
            }
            if (kratosProvider.LoginHintOption.IsSet)
                writer.WriteString("login_hint", kratosProvider.LoginHint);

            if (kratosProvider.NonceOption.IsSet)
                writer.WriteString("nonce", kratosProvider.Nonce);

            if (kratosProvider.ParametersOption.IsSet)
            {
                writer.WritePropertyName("parameters");
                JsonSerializer.Serialize(writer, kratosProvider.Parameters, jsonSerializerOptions);
            }
        }
    }
}
