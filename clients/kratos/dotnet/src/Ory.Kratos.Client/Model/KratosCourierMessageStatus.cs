// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Ory.Kratos.Client.Client;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// A Message&#39;s Status
    /// </summary>
    /// <value>A Message&#39;s Status</value>
    public enum KratosCourierMessageStatus
    {
        /// <summary>
        /// Enum Queued for value: queued
        /// </summary>
        Queued = 1,

        /// <summary>
        /// Enum Sent for value: sent
        /// </summary>
        Sent = 2,

        /// <summary>
        /// Enum Processing for value: processing
        /// </summary>
        Processing = 3,

        /// <summary>
        /// Enum Abandoned for value: abandoned
        /// </summary>
        Abandoned = 4
    }

    /// <summary>
    /// Converts <see cref="KratosCourierMessageStatus"/> to and from the JSON value
    /// </summary>
    public static class KratosCourierMessageStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="KratosCourierMessageStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosCourierMessageStatus FromString(string value)
        {
            if (value.Equals("queued"))
                return KratosCourierMessageStatus.Queued;

            if (value.Equals("sent"))
                return KratosCourierMessageStatus.Sent;

            if (value.Equals("processing"))
                return KratosCourierMessageStatus.Processing;

            if (value.Equals("abandoned"))
                return KratosCourierMessageStatus.Abandoned;

            throw new NotImplementedException($"Could not convert value to type KratosCourierMessageStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="KratosCourierMessageStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosCourierMessageStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("queued"))
                return KratosCourierMessageStatus.Queued;

            if (value.Equals("sent"))
                return KratosCourierMessageStatus.Sent;

            if (value.Equals("processing"))
                return KratosCourierMessageStatus.Processing;

            if (value.Equals("abandoned"))
                return KratosCourierMessageStatus.Abandoned;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="KratosCourierMessageStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(KratosCourierMessageStatus value)
        {
            if (value == KratosCourierMessageStatus.Queued)
                return "queued";

            if (value == KratosCourierMessageStatus.Sent)
                return "sent";

            if (value == KratosCourierMessageStatus.Processing)
                return "processing";

            if (value == KratosCourierMessageStatus.Abandoned)
                return "abandoned";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosCourierMessageStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class KratosCourierMessageStatusJsonConverter : JsonConverter<KratosCourierMessageStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosCourierMessageStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosCourierMessageStatus? result = rawValue == null
                ? null
                : KratosCourierMessageStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the KratosCourierMessageStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosCourierMessageStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosCourierMessageStatus kratosCourierMessageStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosCourierMessageStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosCourierMessageStatus"/>
    /// </summary>
    public class KratosCourierMessageStatusNullableJsonConverter : JsonConverter<KratosCourierMessageStatus?>
    {
        /// <summary>
        /// Returns a KratosCourierMessageStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosCourierMessageStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosCourierMessageStatus? result = rawValue == null
                ? null
                : KratosCourierMessageStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosCourierMessageStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosCourierMessageStatus? kratosCourierMessageStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosCourierMessageStatus?.ToString() ?? "null");
        }
    }
}
