// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Ory.Kratos.Client.Client;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// KratosUpdateFedcmFlowBody
    /// </summary>
    public partial class KratosUpdateFedcmFlowBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateFedcmFlowBody" /> class.
        /// </summary>
        /// <param name="csrfToken">CSRFToken is the anti-CSRF token.</param>
        /// <param name="token">Token contains the result of &#x60;navigator.credentials.get&#x60;.</param>
        /// <param name="nonce">Nonce is the nonce that was used in the &#x60;navigator.credentials.get&#x60; call. If specified, it must match the &#x60;nonce&#x60; claim in the token.</param>
        [JsonConstructor]
        public KratosUpdateFedcmFlowBody(string csrfToken, string token, Option<string?> nonce = default)
        {
            CsrfToken = csrfToken;
            Token = token;
            NonceOption = nonce;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// CSRFToken is the anti-CSRF token.
        /// </summary>
        /// <value>CSRFToken is the anti-CSRF token.</value>
        [JsonPropertyName("csrf_token")]
        public string CsrfToken { get; set; }

        /// <summary>
        /// Token contains the result of &#x60;navigator.credentials.get&#x60;.
        /// </summary>
        /// <value>Token contains the result of &#x60;navigator.credentials.get&#x60;.</value>
        [JsonPropertyName("token")]
        public string Token { get; set; }

        /// <summary>
        /// Used to track the state of Nonce
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NonceOption { get; private set; }

        /// <summary>
        /// Nonce is the nonce that was used in the &#x60;navigator.credentials.get&#x60; call. If specified, it must match the &#x60;nonce&#x60; claim in the token.
        /// </summary>
        /// <value>Nonce is the nonce that was used in the &#x60;navigator.credentials.get&#x60; call. If specified, it must match the &#x60;nonce&#x60; claim in the token.</value>
        [JsonPropertyName("nonce")]
        public string? Nonce { get { return this.NonceOption; } set { this.NonceOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateFedcmFlowBody {\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateFedcmFlowBody" />
    /// </summary>
    public class KratosUpdateFedcmFlowBodyJsonConverter : JsonConverter<KratosUpdateFedcmFlowBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateFedcmFlowBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateFedcmFlowBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> csrfToken = default;
            Option<string?> token = default;
            Option<string?> nonce = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "token":
                            token = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nonce":
                            nonce = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!csrfToken.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateFedcmFlowBody.", nameof(csrfToken));

            if (!token.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateFedcmFlowBody.", nameof(token));

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateFedcmFlowBody.");

            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token), "Property is not nullable for class KratosUpdateFedcmFlowBody.");

            if (nonce.IsSet && nonce.Value == null)
                throw new ArgumentNullException(nameof(nonce), "Property is not nullable for class KratosUpdateFedcmFlowBody.");

            return new KratosUpdateFedcmFlowBody(csrfToken.Value!, token.Value!, nonce);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateFedcmFlowBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateFedcmFlowBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateFedcmFlowBody kratosUpdateFedcmFlowBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateFedcmFlowBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateFedcmFlowBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateFedcmFlowBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateFedcmFlowBody kratosUpdateFedcmFlowBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateFedcmFlowBody.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateFedcmFlowBody.CsrfToken), "Property is required for class KratosUpdateFedcmFlowBody.");

            if (kratosUpdateFedcmFlowBody.Token == null)
                throw new ArgumentNullException(nameof(kratosUpdateFedcmFlowBody.Token), "Property is required for class KratosUpdateFedcmFlowBody.");

            if (kratosUpdateFedcmFlowBody.NonceOption.IsSet && kratosUpdateFedcmFlowBody.Nonce == null)
                throw new ArgumentNullException(nameof(kratosUpdateFedcmFlowBody.Nonce), "Property is required for class KratosUpdateFedcmFlowBody.");

            writer.WriteString("csrf_token", kratosUpdateFedcmFlowBody.CsrfToken);

            writer.WriteString("token", kratosUpdateFedcmFlowBody.Token);

            if (kratosUpdateFedcmFlowBody.NonceOption.IsSet)
                writer.WriteString("nonce", kratosUpdateFedcmFlowBody.Nonce);
        }
    }
}
