// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Ory.Kratos.Client.Client;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// Update Login flow using the code method
    /// </summary>
    public partial class KratosUpdateLoginFlowWithCodeMethod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowWithCodeMethod" /> class.
        /// </summary>
        /// <param name="csrfToken">CSRFToken is the anti-CSRF token</param>
        /// <param name="method">Method should be set to \&quot;code\&quot; when logging in using the code strategy.</param>
        /// <param name="address">Address is the address to send the code to, in case that there are multiple addresses. This field is only used in two-factor flows and is ineffective for passwordless flows.</param>
        /// <param name="code">Code is the 6 digits code sent to the user</param>
        /// <param name="identifier">Identifier is the code identifier The identifier requires that the user has already completed the registration or settings with code flow.</param>
        /// <param name="resend">Resend is set when the user wants to resend the code</param>
        /// <param name="transientPayload">Transient data to pass along to any webhooks</param>
        /// <param name="trustDevice">Trust this device</param>
        [JsonConstructor]
        public KratosUpdateLoginFlowWithCodeMethod(string csrfToken, string method, Option<string?> address = default, Option<string?> code = default, Option<string?> identifier = default, Option<string?> resend = default, Option<Object?> transientPayload = default, Option<bool?> trustDevice = default)
        {
            CsrfToken = csrfToken;
            Method = method;
            AddressOption = address;
            CodeOption = code;
            IdentifierOption = identifier;
            ResendOption = resend;
            TransientPayloadOption = transientPayload;
            TrustDeviceOption = trustDevice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// CSRFToken is the anti-CSRF token
        /// </summary>
        /// <value>CSRFToken is the anti-CSRF token</value>
        [JsonPropertyName("csrf_token")]
        public string CsrfToken { get; set; }

        /// <summary>
        /// Method should be set to \&quot;code\&quot; when logging in using the code strategy.
        /// </summary>
        /// <value>Method should be set to \&quot;code\&quot; when logging in using the code strategy.</value>
        [JsonPropertyName("method")]
        public string Method { get; set; }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressOption { get; private set; }

        /// <summary>
        /// Address is the address to send the code to, in case that there are multiple addresses. This field is only used in two-factor flows and is ineffective for passwordless flows.
        /// </summary>
        /// <value>Address is the address to send the code to, in case that there are multiple addresses. This field is only used in two-factor flows and is ineffective for passwordless flows.</value>
        [JsonPropertyName("address")]
        public string? Address { get { return this.AddressOption; } set { this.AddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Code is the 6 digits code sent to the user
        /// </summary>
        /// <value>Code is the 6 digits code sent to the user</value>
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Identifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdentifierOption { get; private set; }

        /// <summary>
        /// Identifier is the code identifier The identifier requires that the user has already completed the registration or settings with code flow.
        /// </summary>
        /// <value>Identifier is the code identifier The identifier requires that the user has already completed the registration or settings with code flow.</value>
        [JsonPropertyName("identifier")]
        public string? Identifier { get { return this.IdentifierOption; } set { this.IdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of Resend
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResendOption { get; private set; }

        /// <summary>
        /// Resend is set when the user wants to resend the code
        /// </summary>
        /// <value>Resend is set when the user wants to resend the code</value>
        [JsonPropertyName("resend")]
        public string? Resend { get { return this.ResendOption; } set { this.ResendOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// Transient data to pass along to any webhooks
        /// </summary>
        /// <value>Transient data to pass along to any webhooks</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Used to track the state of TrustDevice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TrustDeviceOption { get; private set; }

        /// <summary>
        /// Trust this device
        /// </summary>
        /// <value>Trust this device</value>
        [JsonPropertyName("trust_device")]
        public bool? TrustDevice { get { return this.TrustDeviceOption; } set { this.TrustDeviceOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateLoginFlowWithCodeMethod {\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Resend: ").Append(Resend).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("  TrustDevice: ").Append(TrustDevice).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateLoginFlowWithCodeMethod" />
    /// </summary>
    public class KratosUpdateLoginFlowWithCodeMethodJsonConverter : JsonConverter<KratosUpdateLoginFlowWithCodeMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateLoginFlowWithCodeMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateLoginFlowWithCodeMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> csrfToken = default;
            Option<string?> method = default;
            Option<string?> address = default;
            Option<string?> code = default;
            Option<string?> identifier = default;
            Option<string?> resend = default;
            Option<Object?> transientPayload = default;
            Option<bool?> trustDevice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "method":
                            method = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "identifier":
                            identifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resend":
                            resend = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "trust_device":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                trustDevice = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!csrfToken.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateLoginFlowWithCodeMethod.", nameof(csrfToken));

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateLoginFlowWithCodeMethod.", nameof(method));

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateLoginFlowWithCodeMethod.");

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateLoginFlowWithCodeMethod.");

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class KratosUpdateLoginFlowWithCodeMethod.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class KratosUpdateLoginFlowWithCodeMethod.");

            if (identifier.IsSet && identifier.Value == null)
                throw new ArgumentNullException(nameof(identifier), "Property is not nullable for class KratosUpdateLoginFlowWithCodeMethod.");

            if (resend.IsSet && resend.Value == null)
                throw new ArgumentNullException(nameof(resend), "Property is not nullable for class KratosUpdateLoginFlowWithCodeMethod.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosUpdateLoginFlowWithCodeMethod.");

            if (trustDevice.IsSet && trustDevice.Value == null)
                throw new ArgumentNullException(nameof(trustDevice), "Property is not nullable for class KratosUpdateLoginFlowWithCodeMethod.");

            return new KratosUpdateLoginFlowWithCodeMethod(csrfToken.Value!, method.Value!, address, code, identifier, resend, transientPayload, trustDevice);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateLoginFlowWithCodeMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateLoginFlowWithCodeMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateLoginFlowWithCodeMethod kratosUpdateLoginFlowWithCodeMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateLoginFlowWithCodeMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateLoginFlowWithCodeMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateLoginFlowWithCodeMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateLoginFlowWithCodeMethod kratosUpdateLoginFlowWithCodeMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateLoginFlowWithCodeMethod.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithCodeMethod.CsrfToken), "Property is required for class KratosUpdateLoginFlowWithCodeMethod.");

            if (kratosUpdateLoginFlowWithCodeMethod.Method == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithCodeMethod.Method), "Property is required for class KratosUpdateLoginFlowWithCodeMethod.");

            if (kratosUpdateLoginFlowWithCodeMethod.AddressOption.IsSet && kratosUpdateLoginFlowWithCodeMethod.Address == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithCodeMethod.Address), "Property is required for class KratosUpdateLoginFlowWithCodeMethod.");

            if (kratosUpdateLoginFlowWithCodeMethod.CodeOption.IsSet && kratosUpdateLoginFlowWithCodeMethod.Code == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithCodeMethod.Code), "Property is required for class KratosUpdateLoginFlowWithCodeMethod.");

            if (kratosUpdateLoginFlowWithCodeMethod.IdentifierOption.IsSet && kratosUpdateLoginFlowWithCodeMethod.Identifier == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithCodeMethod.Identifier), "Property is required for class KratosUpdateLoginFlowWithCodeMethod.");

            if (kratosUpdateLoginFlowWithCodeMethod.ResendOption.IsSet && kratosUpdateLoginFlowWithCodeMethod.Resend == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithCodeMethod.Resend), "Property is required for class KratosUpdateLoginFlowWithCodeMethod.");

            if (kratosUpdateLoginFlowWithCodeMethod.TransientPayloadOption.IsSet && kratosUpdateLoginFlowWithCodeMethod.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithCodeMethod.TransientPayload), "Property is required for class KratosUpdateLoginFlowWithCodeMethod.");

            writer.WriteString("csrf_token", kratosUpdateLoginFlowWithCodeMethod.CsrfToken);

            writer.WriteString("method", kratosUpdateLoginFlowWithCodeMethod.Method);

            if (kratosUpdateLoginFlowWithCodeMethod.AddressOption.IsSet)
                writer.WriteString("address", kratosUpdateLoginFlowWithCodeMethod.Address);

            if (kratosUpdateLoginFlowWithCodeMethod.CodeOption.IsSet)
                writer.WriteString("code", kratosUpdateLoginFlowWithCodeMethod.Code);

            if (kratosUpdateLoginFlowWithCodeMethod.IdentifierOption.IsSet)
                writer.WriteString("identifier", kratosUpdateLoginFlowWithCodeMethod.Identifier);

            if (kratosUpdateLoginFlowWithCodeMethod.ResendOption.IsSet)
                writer.WriteString("resend", kratosUpdateLoginFlowWithCodeMethod.Resend);

            if (kratosUpdateLoginFlowWithCodeMethod.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosUpdateLoginFlowWithCodeMethod.TransientPayload, jsonSerializerOptions);
            }
            if (kratosUpdateLoginFlowWithCodeMethod.TrustDeviceOption.IsSet)
                writer.WriteBoolean("trust_device", kratosUpdateLoginFlowWithCodeMethod.TrustDeviceOption.Value!.Value);
        }
    }
}
