/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Ory.Kratos.Client.Api;
using Ory.Kratos.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Ory.Kratos.Client.Test.Api
{
    /// <summary>
    ///  Class for testing IdentityApi
    /// </summary>
    public sealed class IdentityApiTests : ApiTestsBase
    {
        private readonly IIdentityApi _instance;

        public IdentityApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IIdentityApi>();
        }

        /// <summary>
        /// Test BatchPatchIdentities
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task BatchPatchIdentitiesAsyncTest()
        {
            Client.Option<KratosPatchIdentitiesBody> kratosPatchIdentitiesBody = default!;
            var response = await _instance.BatchPatchIdentitiesAsync(kratosPatchIdentitiesBody);
            var model = response.Ok();
            Assert.IsType<KratosBatchPatchIdentitiesResponse>(model);
        }

        /// <summary>
        /// Test CreateIdentity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateIdentityAsyncTest()
        {
            Client.Option<KratosCreateIdentityBody> kratosCreateIdentityBody = default!;
            var response = await _instance.CreateIdentityAsync(kratosCreateIdentityBody);
            var model = response.Created();
            Assert.IsType<KratosIdentity>(model);
        }

        /// <summary>
        /// Test CreateRecoveryCodeForIdentity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateRecoveryCodeForIdentityAsyncTest()
        {
            Client.Option<KratosCreateRecoveryCodeForIdentityBody> kratosCreateRecoveryCodeForIdentityBody = default!;
            var response = await _instance.CreateRecoveryCodeForIdentityAsync(kratosCreateRecoveryCodeForIdentityBody);
            var model = response.Created();
            Assert.IsType<KratosRecoveryCodeForIdentity>(model);
        }

        /// <summary>
        /// Test CreateRecoveryLinkForIdentity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateRecoveryLinkForIdentityAsyncTest()
        {
            Client.Option<string> returnTo = default!;
            Client.Option<KratosCreateRecoveryLinkForIdentityBody> kratosCreateRecoveryLinkForIdentityBody = default!;
            var response = await _instance.CreateRecoveryLinkForIdentityAsync(returnTo, kratosCreateRecoveryLinkForIdentityBody);
            var model = response.Ok();
            Assert.IsType<KratosRecoveryLinkForIdentity>(model);
        }

        /// <summary>
        /// Test DeleteIdentity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteIdentityAsyncTest()
        {
            string id = default!;
            await _instance.DeleteIdentityAsync(id);
        }

        /// <summary>
        /// Test DeleteIdentityCredentials
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteIdentityCredentialsAsyncTest()
        {
            string id = default!;
            string type = default!;
            Client.Option<string> identifier = default!;
            await _instance.DeleteIdentityCredentialsAsync(id, type, identifier);
        }

        /// <summary>
        /// Test DeleteIdentitySessions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteIdentitySessionsAsyncTest()
        {
            string id = default!;
            await _instance.DeleteIdentitySessionsAsync(id);
        }

        /// <summary>
        /// Test DisableSession
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DisableSessionAsyncTest()
        {
            string id = default!;
            await _instance.DisableSessionAsync(id);
        }

        /// <summary>
        /// Test ExtendSession
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExtendSessionAsyncTest()
        {
            string id = default!;
            var response = await _instance.ExtendSessionAsync(id);
            var model = response.Ok();
            Assert.IsType<KratosSession>(model);
        }

        /// <summary>
        /// Test GetIdentity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetIdentityAsyncTest()
        {
            string id = default!;
            Client.Option<List<string>> includeCredential = default!;
            var response = await _instance.GetIdentityAsync(id, includeCredential);
            var model = response.Ok();
            Assert.IsType<KratosIdentity>(model);
        }

        /// <summary>
        /// Test GetIdentitySchema
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetIdentitySchemaAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetIdentitySchemaAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetSession
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSessionAsyncTest()
        {
            string id = default!;
            Client.Option<List<string>> expand = default!;
            var response = await _instance.GetSessionAsync(id, expand);
            var model = response.Ok();
            Assert.IsType<KratosSession>(model);
        }

        /// <summary>
        /// Test ListIdentities
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListIdentitiesAsyncTest()
        {
            Client.Option<long> perPage = default!;
            Client.Option<long> page = default!;
            Client.Option<long> pageSize = default!;
            Client.Option<string> pageToken = default!;
            Client.Option<string> consistency = default!;
            Client.Option<List<string>> ids = default!;
            Client.Option<string> credentialsIdentifier = default!;
            Client.Option<string> previewCredentialsIdentifierSimilar = default!;
            Client.Option<List<string>> includeCredential = default!;
            Client.Option<string> organizationId = default!;
            var response = await _instance.ListIdentitiesAsync(perPage, page, pageSize, pageToken, consistency, ids, credentialsIdentifier, previewCredentialsIdentifierSimilar, includeCredential, organizationId);
            var model = response.Ok();
            Assert.IsType<List<KratosIdentity>>(model);
        }

        /// <summary>
        /// Test ListIdentityDevices
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListIdentityDevicesAsyncTest()
        {
            string id = default!;
            var response = await _instance.ListIdentityDevicesAsync(id);
            var model = response.Ok();
            Assert.IsType<List<KratosSessionDevice>>(model);
        }

        /// <summary>
        /// Test ListIdentitySchemas
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListIdentitySchemasAsyncTest()
        {
            Client.Option<long> perPage = default!;
            Client.Option<long> page = default!;
            Client.Option<long> pageSize = default!;
            Client.Option<string> pageToken = default!;
            var response = await _instance.ListIdentitySchemasAsync(perPage, page, pageSize, pageToken);
            var model = response.Ok();
            Assert.IsType<List<KratosIdentitySchemaContainer>>(model);
        }

        /// <summary>
        /// Test ListIdentitySessions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListIdentitySessionsAsyncTest()
        {
            string id = default!;
            Client.Option<long> perPage = default!;
            Client.Option<long> page = default!;
            Client.Option<long> pageSize = default!;
            Client.Option<string> pageToken = default!;
            Client.Option<bool> active = default!;
            var response = await _instance.ListIdentitySessionsAsync(id, perPage, page, pageSize, pageToken, active);
            var model = response.Ok();
            Assert.IsType<List<KratosSession>>(model);
        }

        /// <summary>
        /// Test ListSessions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListSessionsAsyncTest()
        {
            Client.Option<long> pageSize = default!;
            Client.Option<string> pageToken = default!;
            Client.Option<bool> active = default!;
            Client.Option<List<string>> expand = default!;
            var response = await _instance.ListSessionsAsync(pageSize, pageToken, active, expand);
            var model = response.Ok();
            Assert.IsType<List<KratosSession>>(model);
        }

        /// <summary>
        /// Test PatchIdentity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PatchIdentityAsyncTest()
        {
            string id = default!;
            Client.Option<List<KratosJsonPatch>> kratosJsonPatch = default!;
            var response = await _instance.PatchIdentityAsync(id, kratosJsonPatch);
            var model = response.Ok();
            Assert.IsType<KratosIdentity>(model);
        }

        /// <summary>
        /// Test PatchIdentityDevices
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PatchIdentityDevicesAsyncTest()
        {
            string id = default!;
            string deviceId = default!;
            var response = await _instance.PatchIdentityDevicesAsync(id, deviceId);
            var model = response.Ok();
            Assert.IsType<List<KratosSessionDevice>>(model);
        }

        /// <summary>
        /// Test UpdateIdentity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateIdentityAsyncTest()
        {
            string id = default!;
            Client.Option<KratosUpdateIdentityBody> kratosUpdateIdentityBody = default!;
            var response = await _instance.UpdateIdentityAsync(id, kratosUpdateIdentityBody);
            var model = response.Ok();
            Assert.IsType<KratosIdentity>(model);
        }
    }
}
