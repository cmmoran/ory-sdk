/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Ory.Kratos.Client.Api;
using Ory.Kratos.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Ory.Kratos.Client.Test.Api
{
    /// <summary>
    ///  Class for testing MetadataApi
    /// </summary>
    public sealed class MetadataApiTests : ApiTestsBase
    {
        private readonly IMetadataApi _instance;

        public MetadataApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IMetadataApi>();
        }

        /// <summary>
        /// Test GetVersion
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetVersionAsyncTest()
        {
            var response = await _instance.GetVersionAsync();
            var model = response.Ok();
            Assert.IsType<KratosGetVersion200Response>(model);
        }

        /// <summary>
        /// Test IsAlive
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task IsAliveAsyncTest()
        {
            var response = await _instance.IsAliveAsync();
            var model = response.Ok();
            Assert.IsType<KratosIsAlive200Response>(model);
        }

        /// <summary>
        /// Test IsReady
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task IsReadyAsyncTest()
        {
            var response = await _instance.IsReadyAsync();
            var model = response.Ok();
            Assert.IsType<KratosIsAlive200Response>(model);
        }
    }
}
