/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Ory.Kratos.Client.Api;
using Ory.Kratos.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Ory.Kratos.Client.Test.Api
{
    /// <summary>
    ///  Class for testing FrontendApi
    /// </summary>
    public sealed class FrontendApiTests : ApiTestsBase
    {
        private readonly IFrontendApi _instance;

        public FrontendApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IFrontendApi>();
        }

        /// <summary>
        /// Test CreateBrowserLoginFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateBrowserLoginFlowAsyncTest()
        {
            Client.Option<bool> refresh = default!;
            Client.Option<string> aal = default!;
            Client.Option<string> returnTo = default!;
            Client.Option<string> cookie = default!;
            Client.Option<string> loginChallenge = default!;
            Client.Option<string> organization = default!;
            Client.Option<string> via = default!;
            var response = await _instance.CreateBrowserLoginFlowAsync(refresh, aal, returnTo, cookie, loginChallenge, organization, via);
            var model = response.Ok();
            Assert.IsType<KratosLoginFlow>(model);
        }

        /// <summary>
        /// Test CreateBrowserLogoutFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateBrowserLogoutFlowAsyncTest()
        {
            Client.Option<string> cookie = default!;
            Client.Option<string> returnTo = default!;
            var response = await _instance.CreateBrowserLogoutFlowAsync(cookie, returnTo);
            var model = response.Ok();
            Assert.IsType<KratosLogoutFlow>(model);
        }

        /// <summary>
        /// Test CreateBrowserRecoveryFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateBrowserRecoveryFlowAsyncTest()
        {
            Client.Option<string> returnTo = default!;
            var response = await _instance.CreateBrowserRecoveryFlowAsync(returnTo);
            var model = response.Ok();
            Assert.IsType<KratosRecoveryFlow>(model);
        }

        /// <summary>
        /// Test CreateBrowserRegistrationFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateBrowserRegistrationFlowAsyncTest()
        {
            Client.Option<string> returnTo = default!;
            Client.Option<string> loginChallenge = default!;
            Client.Option<string> afterVerificationReturnTo = default!;
            Client.Option<string> organization = default!;
            var response = await _instance.CreateBrowserRegistrationFlowAsync(returnTo, loginChallenge, afterVerificationReturnTo, organization);
            var model = response.Ok();
            Assert.IsType<KratosRegistrationFlow>(model);
        }

        /// <summary>
        /// Test CreateBrowserSettingsFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateBrowserSettingsFlowAsyncTest()
        {
            Client.Option<string> returnTo = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.CreateBrowserSettingsFlowAsync(returnTo, cookie);
            var model = response.Ok();
            Assert.IsType<KratosSettingsFlow>(model);
        }

        /// <summary>
        /// Test CreateBrowserVerificationFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateBrowserVerificationFlowAsyncTest()
        {
            Client.Option<string> returnTo = default!;
            var response = await _instance.CreateBrowserVerificationFlowAsync(returnTo);
            var model = response.Ok();
            Assert.IsType<KratosVerificationFlow>(model);
        }

        /// <summary>
        /// Test CreateFedcmFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateFedcmFlowAsyncTest()
        {
            var response = await _instance.CreateFedcmFlowAsync();
            var model = response.Ok();
            Assert.IsType<KratosCreateFedcmFlowResponse>(model);
        }

        /// <summary>
        /// Test CreateNativeLoginFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNativeLoginFlowAsyncTest()
        {
            Client.Option<bool> refresh = default!;
            Client.Option<string> aal = default!;
            Client.Option<string> xSessionToken = default!;
            Client.Option<bool> returnSessionTokenExchangeCode = default!;
            Client.Option<string> returnTo = default!;
            Client.Option<string> organization = default!;
            Client.Option<string> via = default!;
            var response = await _instance.CreateNativeLoginFlowAsync(refresh, aal, xSessionToken, returnSessionTokenExchangeCode, returnTo, organization, via);
            var model = response.Ok();
            Assert.IsType<KratosLoginFlow>(model);
        }

        /// <summary>
        /// Test CreateNativeRecoveryFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNativeRecoveryFlowAsyncTest()
        {
            var response = await _instance.CreateNativeRecoveryFlowAsync();
            var model = response.Ok();
            Assert.IsType<KratosRecoveryFlow>(model);
        }

        /// <summary>
        /// Test CreateNativeRegistrationFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNativeRegistrationFlowAsyncTest()
        {
            Client.Option<bool> returnSessionTokenExchangeCode = default!;
            Client.Option<string> returnTo = default!;
            Client.Option<string> organization = default!;
            var response = await _instance.CreateNativeRegistrationFlowAsync(returnSessionTokenExchangeCode, returnTo, organization);
            var model = response.Ok();
            Assert.IsType<KratosRegistrationFlow>(model);
        }

        /// <summary>
        /// Test CreateNativeSettingsFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNativeSettingsFlowAsyncTest()
        {
            Client.Option<string> xSessionToken = default!;
            var response = await _instance.CreateNativeSettingsFlowAsync(xSessionToken);
            var model = response.Ok();
            Assert.IsType<KratosSettingsFlow>(model);
        }

        /// <summary>
        /// Test CreateNativeVerificationFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNativeVerificationFlowAsyncTest()
        {
            Client.Option<string> returnTo = default!;
            var response = await _instance.CreateNativeVerificationFlowAsync(returnTo);
            var model = response.Ok();
            Assert.IsType<KratosVerificationFlow>(model);
        }

        /// <summary>
        /// Test DisableMyOtherSessions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DisableMyOtherSessionsAsyncTest()
        {
            Client.Option<string> xSessionToken = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.DisableMyOtherSessionsAsync(xSessionToken, cookie);
            var model = response.Ok();
            Assert.IsType<KratosDeleteMySessionsCount>(model);
        }

        /// <summary>
        /// Test DisableMySession
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DisableMySessionAsyncTest()
        {
            string id = default!;
            Client.Option<string> xSessionToken = default!;
            Client.Option<string> cookie = default!;
            await _instance.DisableMySessionAsync(id, xSessionToken, cookie);
        }

        /// <summary>
        /// Test ExchangeSessionToken
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExchangeSessionTokenAsyncTest()
        {
            string initCode = default!;
            string returnToCode = default!;
            var response = await _instance.ExchangeSessionTokenAsync(initCode, returnToCode);
            var model = response.Ok();
            Assert.IsType<KratosSuccessfulNativeLogin>(model);
        }

        /// <summary>
        /// Test GetFlowError
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFlowErrorAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFlowErrorAsync(id);
            var model = response.Ok();
            Assert.IsType<KratosFlowError>(model);
        }

        /// <summary>
        /// Test GetLoginFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLoginFlowAsyncTest()
        {
            string id = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.GetLoginFlowAsync(id, cookie);
            var model = response.Ok();
            Assert.IsType<KratosLoginFlow>(model);
        }

        /// <summary>
        /// Test GetRecoveryFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRecoveryFlowAsyncTest()
        {
            string id = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.GetRecoveryFlowAsync(id, cookie);
            var model = response.Ok();
            Assert.IsType<KratosRecoveryFlow>(model);
        }

        /// <summary>
        /// Test GetRegistrationFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRegistrationFlowAsyncTest()
        {
            string id = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.GetRegistrationFlowAsync(id, cookie);
            var model = response.Ok();
            Assert.IsType<KratosRegistrationFlow>(model);
        }

        /// <summary>
        /// Test GetSettingsFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSettingsFlowAsyncTest()
        {
            string id = default!;
            Client.Option<string> xSessionToken = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.GetSettingsFlowAsync(id, xSessionToken, cookie);
            var model = response.Ok();
            Assert.IsType<KratosSettingsFlow>(model);
        }

        /// <summary>
        /// Test GetVerificationFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetVerificationFlowAsyncTest()
        {
            string id = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.GetVerificationFlowAsync(id, cookie);
            var model = response.Ok();
            Assert.IsType<KratosVerificationFlow>(model);
        }

        /// <summary>
        /// Test GetWebAuthnJavaScript
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetWebAuthnJavaScriptAsyncTest()
        {
            var response = await _instance.GetWebAuthnJavaScriptAsync();
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test ListMySessions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListMySessionsAsyncTest()
        {
            Client.Option<long> perPage = default!;
            Client.Option<long> page = default!;
            Client.Option<long> pageSize = default!;
            Client.Option<string> pageToken = default!;
            Client.Option<string> xSessionToken = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.ListMySessionsAsync(perPage, page, pageSize, pageToken, xSessionToken, cookie);
            var model = response.Ok();
            Assert.IsType<List<KratosSession>>(model);
        }

        /// <summary>
        /// Test PerformNativeLogout
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PerformNativeLogoutAsyncTest()
        {
            KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody = default!;
            await _instance.PerformNativeLogoutAsync(kratosPerformNativeLogoutBody);
        }

        /// <summary>
        /// Test ToSession
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ToSessionAsyncTest()
        {
            Client.Option<string> xSessionToken = default!;
            Client.Option<string> cookie = default!;
            Client.Option<string> tokenizeAs = default!;
            var response = await _instance.ToSessionAsync(xSessionToken, cookie, tokenizeAs);
            var model = response.Ok();
            Assert.IsType<KratosSession>(model);
        }

        /// <summary>
        /// Test UpdateFedcmFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateFedcmFlowAsyncTest()
        {
            KratosUpdateFedcmFlowBody kratosUpdateFedcmFlowBody = default!;
            var response = await _instance.UpdateFedcmFlowAsync(kratosUpdateFedcmFlowBody);
            var model = response.Ok();
            Assert.IsType<KratosSuccessfulNativeLogin>(model);
        }

        /// <summary>
        /// Test UpdateLoginFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateLoginFlowAsyncTest()
        {
            string flow = default!;
            KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody = default!;
            Client.Option<string> xSessionToken = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.UpdateLoginFlowAsync(flow, kratosUpdateLoginFlowBody, xSessionToken, cookie);
            var model = response.Ok();
            Assert.IsType<KratosSuccessfulNativeLogin>(model);
        }

        /// <summary>
        /// Test UpdateLogoutFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateLogoutFlowAsyncTest()
        {
            Client.Option<string> token = default!;
            Client.Option<string> returnTo = default!;
            Client.Option<string> cookie = default!;
            await _instance.UpdateLogoutFlowAsync(token, returnTo, cookie);
        }

        /// <summary>
        /// Test UpdateRecoveryFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateRecoveryFlowAsyncTest()
        {
            string flow = default!;
            KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody = default!;
            Client.Option<string> token = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.UpdateRecoveryFlowAsync(flow, kratosUpdateRecoveryFlowBody, token, cookie);
            var model = response.Ok();
            Assert.IsType<KratosRecoveryFlow>(model);
        }

        /// <summary>
        /// Test UpdateRegistrationFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateRegistrationFlowAsyncTest()
        {
            string flow = default!;
            KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.UpdateRegistrationFlowAsync(flow, kratosUpdateRegistrationFlowBody, cookie);
            var model = response.Ok();
            Assert.IsType<KratosSuccessfulNativeRegistration>(model);
        }

        /// <summary>
        /// Test UpdateSettingsFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateSettingsFlowAsyncTest()
        {
            string flow = default!;
            KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody = default!;
            Client.Option<string> xSessionToken = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.UpdateSettingsFlowAsync(flow, kratosUpdateSettingsFlowBody, xSessionToken, cookie);
            var model = response.Ok();
            Assert.IsType<KratosSettingsFlow>(model);
        }

        /// <summary>
        /// Test UpdateVerificationFlow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateVerificationFlowAsyncTest()
        {
            string flow = default!;
            KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody = default!;
            Client.Option<string> token = default!;
            Client.Option<string> cookie = default!;
            var response = await _instance.UpdateVerificationFlowAsync(flow, kratosUpdateVerificationFlowBody, token, cookie);
            var model = response.Ok();
            Assert.IsType<KratosVerificationFlow>(model);
        }
    }
}
