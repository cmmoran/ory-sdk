/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SessionDevice : Device corresponding to a Session
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SessionDevice {
    /// A list of authenticators which were used to authenticate the session.
    #[serde(rename = "authentication_methods", skip_serializing_if = "Option::is_none")]
    pub authentication_methods: Option<Vec<models::SessionAuthenticationMethod>>,
    /// Device record ID
    #[serde(rename = "id")]
    pub id: String,
    /// IPAddress of the client
    #[serde(rename = "ip_address", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    /// Geo Location corresponding to the IP Address
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Is this device trusted? (only matters if this device submitted aal2+ credentials)
    #[serde(rename = "trusted", skip_serializing_if = "Option::is_none")]
    pub trusted: Option<bool>,
    /// UserAgent of the client
    #[serde(rename = "user_agent", skip_serializing_if = "Option::is_none")]
    pub user_agent: Option<String>,
}

impl SessionDevice {
    /// Device corresponding to a Session
    pub fn new(id: String) -> SessionDevice {
        SessionDevice {
            authentication_methods: None,
            id,
            ip_address: None,
            location: None,
            trusted: None,
            user_agent: None,
        }
    }
}

