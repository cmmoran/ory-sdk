/* tslint:disable */
/* eslint-disable */
/**
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.4.0-alpha.0
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SessionAuthenticationMethod } from './SessionAuthenticationMethod';
import {
    SessionAuthenticationMethodFromJSON,
    SessionAuthenticationMethodFromJSONTyped,
    SessionAuthenticationMethodToJSON,
    SessionAuthenticationMethodToJSONTyped,
} from './SessionAuthenticationMethod';

/**
 * Device corresponding to a Session
 * @export
 * @interface SessionDevice
 */
export interface SessionDevice {
    /**
     * A list of authenticators which were used to authenticate the session.
     * @type {Array<SessionAuthenticationMethod>}
     * @memberof SessionDevice
     */
    authentication_methods?: Array<SessionAuthenticationMethod>;
    /**
     * Device record ID
     * @type {string}
     * @memberof SessionDevice
     */
    id: string;
    /**
     * IPAddress of the client
     * @type {string}
     * @memberof SessionDevice
     */
    ip_address?: string;
    /**
     * Geo Location corresponding to the IP Address
     * @type {string}
     * @memberof SessionDevice
     */
    location?: string;
    /**
     * Is this device trusted? (only matters if this device submitted aal2+ credentials)
     * @type {boolean}
     * @memberof SessionDevice
     */
    trusted?: boolean;
    /**
     * UserAgent of the client
     * @type {string}
     * @memberof SessionDevice
     */
    user_agent?: string;
}

/**
 * Check if a given object implements the SessionDevice interface.
 */
export function instanceOfSessionDevice(value: object): value is SessionDevice {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function SessionDeviceFromJSON(json: any): SessionDevice {
    return SessionDeviceFromJSONTyped(json, false);
}

export function SessionDeviceFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionDevice {
    if (json == null) {
        return json;
    }
    return {
        
        'authentication_methods': json['authentication_methods'] == null ? undefined : ((json['authentication_methods'] as Array<any>).map(SessionAuthenticationMethodFromJSON)),
        'id': json['id'],
        'ip_address': json['ip_address'] == null ? undefined : json['ip_address'],
        'location': json['location'] == null ? undefined : json['location'],
        'trusted': json['trusted'] == null ? undefined : json['trusted'],
        'user_agent': json['user_agent'] == null ? undefined : json['user_agent'],
    };
}

export function SessionDeviceToJSON(json: any): SessionDevice {
    return SessionDeviceToJSONTyped(json, false);
}

export function SessionDeviceToJSONTyped(value?: SessionDevice | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'authentication_methods': value['authentication_methods'] == null ? undefined : ((value['authentication_methods'] as Array<any>).map(SessionAuthenticationMethodToJSON)),
        'id': value['id'],
        'ip_address': value['ip_address'],
        'location': value['location'],
        'trusted': value['trusted'],
        'user_agent': value['user_agent'],
    };
}

