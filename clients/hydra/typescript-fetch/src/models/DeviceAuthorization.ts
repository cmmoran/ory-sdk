/* tslint:disable */
/* eslint-disable */
/**
 * Ory Hydra API
 * Documentation for all of Ory Hydra\'s APIs. 
 *
 * The version of the OpenAPI document: v2.4.0-alpha.1
 * Contact: hi@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * # Ory's OAuth 2.0 Device Authorization API
 * @export
 * @interface DeviceAuthorization
 */
export interface DeviceAuthorization {
    /**
     * The device verification code.
     * @type {string}
     * @memberof DeviceAuthorization
     */
    device_code?: string;
    /**
     * The lifetime in seconds of the "device_code" and "user_code".
     * @type {number}
     * @memberof DeviceAuthorization
     */
    expires_in?: number;
    /**
     * The minimum amount of time in seconds that the client
     * SHOULD wait between polling requests to the token endpoint.  If no
     * value is provided, clients MUST use 5 as the default.
     * @type {number}
     * @memberof DeviceAuthorization
     */
    interval?: number;
    /**
     * The end-user verification code.
     * @type {string}
     * @memberof DeviceAuthorization
     */
    user_code?: string;
    /**
     * The end-user verification URI on the authorization
     * server.  The URI should be short and easy to remember as end users
     * will be asked to manually type it into their user agent.
     * @type {string}
     * @memberof DeviceAuthorization
     */
    verification_uri?: string;
    /**
     * A verification URI that includes the "user_code" (or
     * other information with the same function as the "user_code"),
     * which is designed for non-textual transmission.
     * @type {string}
     * @memberof DeviceAuthorization
     */
    verification_uri_complete?: string;
}

/**
 * Check if a given object implements the DeviceAuthorization interface.
 */
export function instanceOfDeviceAuthorization(value: object): value is DeviceAuthorization {
    return true;
}

export function DeviceAuthorizationFromJSON(json: any): DeviceAuthorization {
    return DeviceAuthorizationFromJSONTyped(json, false);
}

export function DeviceAuthorizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceAuthorization {
    if (json == null) {
        return json;
    }
    return {
        
        'device_code': json['device_code'] == null ? undefined : json['device_code'],
        'expires_in': json['expires_in'] == null ? undefined : json['expires_in'],
        'interval': json['interval'] == null ? undefined : json['interval'],
        'user_code': json['user_code'] == null ? undefined : json['user_code'],
        'verification_uri': json['verification_uri'] == null ? undefined : json['verification_uri'],
        'verification_uri_complete': json['verification_uri_complete'] == null ? undefined : json['verification_uri_complete'],
    };
}

export function DeviceAuthorizationToJSON(value?: DeviceAuthorization | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'device_code': value['device_code'],
        'expires_in': value['expires_in'],
        'interval': value['interval'],
        'user_code': value['user_code'],
        'verification_uri': value['verification_uri'],
        'verification_uri_complete': value['verification_uri_complete'],
    };
}

