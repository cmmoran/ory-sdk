/* tslint:disable */
/* eslint-disable */
/**
 * Ory Hydra API
 * Documentation for all of Ory Hydra\'s APIs. 
 *
 * The version of the OpenAPI document: v2.4.0-alpha.1
 * Contact: hi@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OAuth2Client } from './OAuth2Client';
import {
    OAuth2ClientFromJSON,
    OAuth2ClientFromJSONTyped,
    OAuth2ClientToJSON,
} from './OAuth2Client';

/**
 * 
 * @export
 * @interface VerifyUserCodeRequest
 */
export interface VerifyUserCodeRequest {
    /**
     * ID is the identifier ("device challenge") of the device request. It is used to
     * identify the session.
     * @type {string}
     * @memberof VerifyUserCodeRequest
     */
    challenge?: string;
    /**
     * 
     * @type {OAuth2Client}
     * @memberof VerifyUserCodeRequest
     */
    client?: OAuth2Client;
    /**
     * 
     * @type {string}
     * @memberof VerifyUserCodeRequest
     */
    device_code_request_id?: string;
    /**
     * 
     * @type {Date}
     * @memberof VerifyUserCodeRequest
     */
    handled_at?: Date;
    /**
     * RequestURL is the original Device Authorization URL requested.
     * @type {string}
     * @memberof VerifyUserCodeRequest
     */
    request_url?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof VerifyUserCodeRequest
     */
    requested_access_token_audience?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof VerifyUserCodeRequest
     */
    requested_scope?: Array<string>;
}

/**
 * Check if a given object implements the VerifyUserCodeRequest interface.
 */
export function instanceOfVerifyUserCodeRequest(value: object): value is VerifyUserCodeRequest {
    return true;
}

export function VerifyUserCodeRequestFromJSON(json: any): VerifyUserCodeRequest {
    return VerifyUserCodeRequestFromJSONTyped(json, false);
}

export function VerifyUserCodeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerifyUserCodeRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'challenge': json['challenge'] == null ? undefined : json['challenge'],
        'client': json['client'] == null ? undefined : OAuth2ClientFromJSON(json['client']),
        'device_code_request_id': json['device_code_request_id'] == null ? undefined : json['device_code_request_id'],
        'handled_at': json['handled_at'] == null ? undefined : (new Date(json['handled_at'])),
        'request_url': json['request_url'] == null ? undefined : json['request_url'],
        'requested_access_token_audience': json['requested_access_token_audience'] == null ? undefined : json['requested_access_token_audience'],
        'requested_scope': json['requested_scope'] == null ? undefined : json['requested_scope'],
    };
}

export function VerifyUserCodeRequestToJSON(value?: VerifyUserCodeRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'challenge': value['challenge'],
        'client': OAuth2ClientToJSON(value['client']),
        'device_code_request_id': value['device_code_request_id'],
        'handled_at': value['handled_at'] == null ? undefined : ((value['handled_at']).toISOString()),
        'request_url': value['request_url'],
        'requested_access_token_audience': value['requested_access_token_audience'],
        'requested_scope': value['requested_scope'],
    };
}

